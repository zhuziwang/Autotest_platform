"""
Django settings for Autotest_platform project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import djcelery
from celery.schedules import crontab
from kombu import Exchange, Queue
from datetime import timedelta
import time
from apscheduler.schedulers.background import BackgroundScheduler

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#zpo_me0s492$q_8-2qav%53jx+965%3qx9j0eyqzf8yx=%%rr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '0.0.0.0', '192.168.2.247', '*', ]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Product',
    'djcelery',
    'Admin',
    'Autotest_platform',
]
#
# AUTH_USER_MODEL = 'Product.User'

MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',        # csrf_token
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.mymiddleware.ExceptionMW',
]

ROOT_URLCONF = 'Autotest_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Autotest_platform.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'autotest',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '3306'
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# 使用了继承的方式，要使用auth模块，需要在setting.py中进行配置
# 默认用户认证时使用哪张表
# AUTH_USER_MODEL = "Autotest_platform.MyUserInfo"

# celery 官方文档：docs.jinkan.org/docs/celery/
# 重新加载celery
djcelery.setup_loader()
# 某个程序中出现的队列，在broker中不存在，则立刻创建它
CELERY_CREATE_MISSING_QUEUES = True
# 队列
CELERY_QUEUES = (
    Queue("web/h5", Exchange("web/h5"), routing_key="web/h5"),
    Queue("requests", Exchange("requests"), routing_key="requests"),
    Queue("default", Exchange("default"), routing_key="default")
    
)
# 路由
CELERY_ROUTES = {
    'web/h5': {"queue": "web/h5", "routing_key": "web/h5"},
    'requests': {"queue": "requests", "routing_key": "requests"}
}


CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_BROKER_URL = 'amqp://guest:guest@192.168.2.201:5672'     # 队列
CELERY_ACCEPT_CONTENT = ['json', 'msgpack', 'yaml']      # 指定任务接收的内容序列化类型
CELERY_RESULT_BACKEND = 'amqp://guest:guest@192.168.2.201:5672'     # 结果存储地址

# https://blog.csdn.net/feixiaohuijava/article/details/77227075
# CELERY_BROKER_TRANSPORT_OPTIONS = {
#                             'confirm_publish': True,    # 返回ack确认信息,占用大量cpu资源。(生产者）
#                             'max_retries': 5,           # 最大重连次数
#                             'interval_start': 0,        # 提交任务时间，0代表立即开始
#                             'interval_step': 1,         # 每次重试多等的时间
#                             'interval_max': 10,         # 最大等待时间
#                             'visibility_timeout': 3600  # celery 在执行task时有个机制,就是任务时长超过了 visibility_timeout
#                                                         # 时还没执行完就会指定其他worker重新开始task,默认的时长是一小时
# }
#
# # 作用是当worker进程意外退出时，task会被放回到队列中
# task_reject_on_worker_lost = True
# # 作用是只有当worker完成了这个task时，任务才被标记为ack状态
# task_acks_late = True
# # Celery的CELERY_ACKS_LATE=True，表示Worker在任务执行完后才向Broker发送acks,慎用
# CELERY_ACKS_LATE = False
# 每个worker执行了多少任务就会死掉，可防止内存泄露
CELERYD_MAX_TASKS_PER_CHILD = 200
# celery worker的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目
CELERYD_CONCURRENCY = 4
# celery worker 每次取rabbit_mq取任务的数量
CELERYD_PREFETCH_MULTIPLIER = 1
# 任务执行结果的超时时间
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24

# 定时启动
# schedule: 启动间隔时间，教程：https://blog.csdn.net/weixin_39623713/article/details/111071628
CELERYBEAT_SCHEDULE = {
    'timing': {
        'task': 'Product.tasks.timingRunning',  # 需要启动的任务名称
        'schedule': crontab(minute=0, hour=0),
        # 'schedule': timedelta(seconds=300),
    },
}


STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

# AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.AllowAllUsersModelBackend']
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 未登录情况下的跳转地址
LOGIN_URL = '/login'

# 上传的资源
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 邮件相关配置
EMAiL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'   # django固定配置
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = '2693601181@qq.com'   # 发送邮件的邮箱
EMAIL_HOST_PASSWORD = ''    # 邮箱授权码
EMAIL_USE_TLS = False

EX_EMAIL = ['2693601181@qq.com']        # 接收者邮箱


# session 设置
SESSION_COOKIE_NAME = "sessionid"       # Session的cookie保存在浏览器上时的key
# SESSION_COOKIE_PATH = "/"               # Session的cookie保存的路径（默认）
SESSION_COOKIE_DOMAIN = None             # Session的cookie保存的域名（默认）
SESSION_COOKIE_SECURE = False            # 是否Https传输cookie（默认）
SESSION_COOKIE_HTTPONLY = True           # 是否Session的cookie只支持http传输（默认）
SESSION_COOKIE_AGE = 1209600             # Session的cookie失效日期（2周）（数字为秒数）（默认）
SESSION_EXPIRE_AT_BROWSER_CLOSE = True   # 是否关闭浏览器使得Session过期（默认）
SESSION_SAVE_EVERY_REQUEST = False       # 是否每次请求都保存Session，默认修改之后才保存（默认）


# 日志
BASE_LOG_DIR = os.path.join(BASE_DIR, "log")
log_name_time = time.strftime('%Y%m%d', time.localtime(time.time()))
LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            #  "format": "%(asctime)s - %(message)s",
            'format': '日志级别：{levelname},生成时间： {asctime} ,模块：{module} ,进程：{process:d},'
                      '线程：{thread:d} , 消息：{message}',
            'style': '{',
        },
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        # 默认的
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "%s.log" % log_name_time),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 3,  # 最多备份几个
            'formatter': 'standard',
            'encoding': 'utf-8',
        },

    },
    'loggers': {
        # 默认的logger应用如下配置
        '': {
            'handlers': ['default'],  # 上线之后可以把'console'移除
            'level': 'WARNING',
            'propagate': True,  # 向不向更高级别的logger传递
        },
    },
}

if not os.path.exists(BASE_LOG_DIR):
    os.mkdir(BASE_LOG_DIR)


# 定时任务, 清空session数据库,这个库不清的话,会不停的增大
scheduler = BackgroundScheduler(timezone='Asia/Shanghai')


# days为int值，几天一清理
# start_data开始日期
@scheduler.scheduled_job(trigger='interval', days=1, start_date='2022-08-31 23:59:59', id='clear_session')
def clear_session_job():
    print('clear session data base')
    # 命令行执行python manage.py clearsessions,可以清除已经失效的session
    os.system('python manage.py claersessions')
    scheduler.start()
